# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.basic_column import BasicColumn
from openapi_server import util

from openapi_server.models.basic_column import BasicColumn  # noqa: E501

class NumericColumn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, name=None, min=None, max=None, percent_missing=None):  # noqa: E501
        """NumericColumn - a model defined in OpenAPI

        :param type: The type of this NumericColumn.  # noqa: E501
        :type type: str
        :param name: The name of this NumericColumn.  # noqa: E501
        :type name: str
        :param min: The min of this NumericColumn.  # noqa: E501
        :type min: float
        :param max: The max of this NumericColumn.  # noqa: E501
        :type max: float
        :param percent_missing: The percent_missing of this NumericColumn.  # noqa: E501
        :type percent_missing: float
        """
        self.openapi_types = {
            'type': str,
            'name': str,
            'min': float,
            'max': float,
            'percent_missing': float
        }

        self.attribute_map = {
            'type': 'type',
            'name': 'name',
            'min': 'min',
            'max': 'max',
            'percent_missing': 'percent_missing'
        }

        self._type = type
        self._name = name
        self._min = min
        self._max = max
        self._percent_missing = percent_missing

    @classmethod
    def from_dict(cls, dikt) -> 'NumericColumn':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NumericColumn of this NumericColumn.  # noqa: E501
        :rtype: NumericColumn
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this NumericColumn.

        Тип колонки  # noqa: E501

        :return: The type of this NumericColumn.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NumericColumn.

        Тип колонки  # noqa: E501

        :param type: The type of this NumericColumn.
        :type type: str
        """
        allowed_values = ["ID", "NUMERIC", "CATEGORICAL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this NumericColumn.

        Название колонки  # noqa: E501

        :return: The name of this NumericColumn.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NumericColumn.

        Название колонки  # noqa: E501

        :param name: The name of this NumericColumn.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def min(self):
        """Gets the min of this NumericColumn.

        Минимальное значение  # noqa: E501

        :return: The min of this NumericColumn.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this NumericColumn.

        Минимальное значение  # noqa: E501

        :param min: The min of this NumericColumn.
        :type min: float
        """
        if min is None:
            raise ValueError("Invalid value for `min`, must not be `None`")  # noqa: E501

        self._min = min

    @property
    def max(self):
        """Gets the max of this NumericColumn.

        Максимальное значение  # noqa: E501

        :return: The max of this NumericColumn.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this NumericColumn.

        Максимальное значение  # noqa: E501

        :param max: The max of this NumericColumn.
        :type max: float
        """
        if max is None:
            raise ValueError("Invalid value for `max`, must not be `None`")  # noqa: E501

        self._max = max

    @property
    def percent_missing(self):
        """Gets the percent_missing of this NumericColumn.

        Процент отсутствующих значений  # noqa: E501

        :return: The percent_missing of this NumericColumn.
        :rtype: float
        """
        return self._percent_missing

    @percent_missing.setter
    def percent_missing(self, percent_missing):
        """Sets the percent_missing of this NumericColumn.

        Процент отсутствующих значений  # noqa: E501

        :param percent_missing: The percent_missing of this NumericColumn.
        :type percent_missing: float
        """
        if percent_missing is None:
            raise ValueError("Invalid value for `percent_missing`, must not be `None`")  # noqa: E501

        self._percent_missing = percent_missing
